# -*- coding: utf-8 -*-
# Using Python 3

import time
import unittest

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

# From stack overflow on fast methods to find factors of an integar
#####################################################################

def factors(n):    
    return set(reduce(list.__add__, 
        ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))

import itertools
flatten_iter = itertools.chain.from_iterable

def factors2(n):
    return set(flatten_iter((i, n//i) 
        for i in range(1, int(n**0.5)+1) if n % i == 0))

#####################################################################


class TestSequenceFunctions(unittest.TestCase):

    def test_factors(self):
        print("""
            1: 1
            3: 1,3
            6: 1,2,3,6
            10: 1,2,5,10
            15: 1,3,5,15
            21: 1,3,7,21
            28: 1,2,4,7,14,28
            """)

        self.assertEqual(factors2(1), {1})
        self.assertEqual(factors2(3), {1,3})
        self.assertEqual(factors2(6), {1,2,3,6})
        self.assertEqual(factors2(10), {1,2,5,10}) 
        self.assertEqual(factors2(15), {1,3,5,15}) 
        self.assertEqual(factors2(21), {1,3,7,21}) 
        self.assertEqual(factors2(28), {1,2,4,7,14,28}) 





tStart = time.time()
#####################################################
# It's go time!
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
"""
found = False
triangle = 0
i = 0

while not found:
    # current natural number
    i += 1
    
    # current triangle number
    triangle += i
    
    if len(factors2(triangle)) > 500:
        found = True

print("triangle: %d" % triangle)


#####################################################
print("run time = " + str((time.time() - tStart)))



if __name__ == '__main__':
    unittest.main()
